// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RubikBook.Database.Context;

#nullable disable

namespace RubikBook.Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("RubikBook.Database.Models.AgeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AgeCategoryName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("NotShow")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("AgeCategorys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgeCategoryName = "کودک",
                            NotShow = false
                        },
                        new
                        {
                            Id = 2,
                            AgeCategoryName = "نوجوان",
                            NotShow = false
                        },
                        new
                        {
                            Id = 3,
                            AgeCategoryName = "جوان",
                            NotShow = false
                        },
                        new
                        {
                            Id = 4,
                            AgeCategoryName = "بزرگسال",
                            NotShow = false
                        });
                });

            modelBuilder.Entity("RubikBook.Database.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AuthorDes")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("NotShow")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorName = "جورج اورول",
                            NotShow = false
                        });
                });

            modelBuilder.Entity("RubikBook.Database.Models.Factor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CloseDateTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Des")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPay")
                        .HasColumnType("bit");

                    b.Property<string>("OpenDateTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Factors");
                });

            modelBuilder.Entity("RubikBook.Database.Models.FactorDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DetailCount")
                        .HasColumnType("int");

                    b.Property<int>("DetailPrice")
                        .HasColumnType("int");

                    b.Property<Guid>("FactorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FactorId");

                    b.HasIndex("ProductId");

                    b.ToTable("FactorDetails");
                });

            modelBuilder.Entity("RubikBook.Database.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("GroupDes")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("NotShow")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GroupName = "فلسفه و روانشناسی",
                            NotShow = false
                        },
                        new
                        {
                            Id = 2,
                            GroupName = "تاریخ و جغرافیا",
                            NotShow = false
                        },
                        new
                        {
                            Id = 3,
                            GroupName = "رمان و داستان",
                            NotShow = false
                        },
                        new
                        {
                            Id = 4,
                            GroupName = "کتاب صوتی",
                            NotShow = false
                        });
                });

            modelBuilder.Entity("RubikBook.Database.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AgeCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("CoverType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Des")
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Inventory")
                        .HasColumnType("int");

                    b.Property<bool>("NotShow")
                        .HasColumnType("bit");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<int>("SellOff")
                        .HasColumnType("int");

                    b.Property<string>("TotalPages")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AgeCategoryId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GroupId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("RubikBook.Database.Models.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("NotShow")
                        .HasColumnType("bit");

                    b.Property<string>("PublisherName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NotShow = false,
                            PublisherName = "پرتقال"
                        });
                });

            modelBuilder.Entity("RubikBook.Database.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5c4f7276-bc1e-49c9-b5a2-a65e596c74c5"),
                            RoleName = "admin",
                            RoleTitle = "مدیر"
                        },
                        new
                        {
                            Id = new Guid("3c0c114a-2f6f-488f-83cd-cbfaa0696532"),
                            RoleName = "user",
                            RoleTitle = "کاربر"
                        });
                });

            modelBuilder.Entity("RubikBook.Database.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("code")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d1ec772e-8533-45a2-8c4f-247647f7222a"),
                            IsActive = true,
                            Mobile = "09115523293",
                            Password = "25-D5-5A-D2-83-AA-40-0A-F4-64-C7-6D-71-3C-07-AD",
                            RoleId = new Guid("5c4f7276-bc1e-49c9-b5a2-a65e596c74c5"),
                            code = 0
                        });
                });

            modelBuilder.Entity("RubikBook.Database.Models.Factor", b =>
                {
                    b.HasOne("RubikBook.Database.Models.User", "User")
                        .WithMany("Factors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RubikBook.Database.Models.FactorDetail", b =>
                {
                    b.HasOne("RubikBook.Database.Models.Factor", "Factor")
                        .WithMany()
                        .HasForeignKey("FactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RubikBook.Database.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Factor");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RubikBook.Database.Models.Product", b =>
                {
                    b.HasOne("RubikBook.Database.Models.AgeCategory", "AgeCategory")
                        .WithMany("products")
                        .HasForeignKey("AgeCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RubikBook.Database.Models.Author", "Author")
                        .WithMany("Products")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RubikBook.Database.Models.Group", "Group")
                        .WithMany("Products")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RubikBook.Database.Models.Publisher", "Publisher")
                        .WithMany("products")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgeCategory");

                    b.Navigation("Author");

                    b.Navigation("Group");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("RubikBook.Database.Models.User", b =>
                {
                    b.HasOne("RubikBook.Database.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RubikBook.Database.Models.AgeCategory", b =>
                {
                    b.Navigation("products");
                });

            modelBuilder.Entity("RubikBook.Database.Models.Author", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("RubikBook.Database.Models.Group", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("RubikBook.Database.Models.Publisher", b =>
                {
                    b.Navigation("products");
                });

            modelBuilder.Entity("RubikBook.Database.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("RubikBook.Database.Models.User", b =>
                {
                    b.Navigation("Factors");
                });
#pragma warning restore 612, 618
        }
    }
}
